// <auto-generated />
using System;
using LeagueManager.Persistence.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LeagueManager.Persistence.EntityFramework.Migrations
{
    [DbContext(typeof(LeagueManagerDbContext))]
    [Migration("20200616171940_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LeagueManager.Domain.Common.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Flag")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("LeagueManager.Domain.Competition.TeamLeague", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PointSystemId")
                        .HasColumnType("int");

                    b.Property<int?>("SportsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("PointSystemId");

                    b.HasIndex("SportsId");

                    b.ToTable("TeamLeagues");
                });

            modelBuilder.Entity("LeagueManager.Domain.Competitor.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("LeagueManager.Domain.Competitor.TeamCompetitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamLeagueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamLeagueId");

                    b.ToTable("TeamCompetitor");
                });

            modelBuilder.Entity("LeagueManager.Domain.Competitor.TeamCompetitorPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamCompetitorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamCompetitorId");

                    b.ToTable("TeamCompetitorPlayer");
                });

            modelBuilder.Entity("LeagueManager.Domain.Match.TeamLeagueMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TeamLeagueRoundId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamLeagueRoundId");

                    b.ToTable("TeamLeagueMatch");
                });

            modelBuilder.Entity("LeagueManager.Domain.Match.TeamMatchEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HomeAway")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamLeagueMatchId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScoreId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamLeagueMatchId");

                    b.ToTable("TeamMatchEntry");
                });

            modelBuilder.Entity("LeagueManager.Domain.Match.TeamMatchEntryGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Minute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamMatchEntryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamMatchEntryId");

                    b.ToTable("TeamMatchEntryGoal");
                });

            modelBuilder.Entity("LeagueManager.Domain.Match.TeamMatchEntryLineupEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamMatchEntryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamMatchEntryId");

                    b.ToTable("TeamMatchEntryLineupEntry");
                });

            modelBuilder.Entity("LeagueManager.Domain.Match.TeamMatchEntrySubstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Minute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlayerInId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerOutId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamMatchEntryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerInId");

                    b.HasIndex("PlayerOutId");

                    b.HasIndex("TeamMatchEntryId");

                    b.ToTable("TeamMatchEntrySubstitution");
                });

            modelBuilder.Entity("LeagueManager.Domain.Player.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("LeagueManager.Domain.Points.PointSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Draw")
                        .HasColumnType("int");

                    b.Property<int>("Lost")
                        .HasColumnType("int");

                    b.Property<int>("Win")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PointSystem");
                });

            modelBuilder.Entity("LeagueManager.Domain.Round.TeamLeagueRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamLeagueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamLeagueId");

                    b.ToTable("TeamLeagueRound");
                });

            modelBuilder.Entity("LeagueManager.Domain.Score.IntegerScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("IntegerScore");
                });

            modelBuilder.Entity("LeagueManager.Domain.Sports.TeamSports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OptionsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OptionsId");

                    b.ToTable("TeamSports");
                });

            modelBuilder.Entity("LeagueManager.Domain.Sports.TeamSportsOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountOfPlayers")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TeamSportsOptions");
                });

            modelBuilder.Entity("LeagueManager.Domain.Competition.TeamLeague", b =>
                {
                    b.HasOne("LeagueManager.Domain.Common.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("LeagueManager.Domain.Points.PointSystem", "PointSystem")
                        .WithMany()
                        .HasForeignKey("PointSystemId");

                    b.HasOne("LeagueManager.Domain.Sports.TeamSports", "Sports")
                        .WithMany()
                        .HasForeignKey("SportsId");
                });

            modelBuilder.Entity("LeagueManager.Domain.Competitor.Team", b =>
                {
                    b.HasOne("LeagueManager.Domain.Common.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("LeagueManager.Domain.Competitor.TeamCompetitor", b =>
                {
                    b.HasOne("LeagueManager.Domain.Competitor.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("LeagueManager.Domain.Competition.TeamLeague", null)
                        .WithMany("Competitors")
                        .HasForeignKey("TeamLeagueId");
                });

            modelBuilder.Entity("LeagueManager.Domain.Competitor.TeamCompetitorPlayer", b =>
                {
                    b.HasOne("LeagueManager.Domain.Player.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.HasOne("LeagueManager.Domain.Competitor.TeamCompetitor", null)
                        .WithMany("Players")
                        .HasForeignKey("TeamCompetitorId");
                });

            modelBuilder.Entity("LeagueManager.Domain.Match.TeamLeagueMatch", b =>
                {
                    b.HasOne("LeagueManager.Domain.Round.TeamLeagueRound", "TeamLeagueRound")
                        .WithMany("Matches")
                        .HasForeignKey("TeamLeagueRoundId");
                });

            modelBuilder.Entity("LeagueManager.Domain.Match.TeamMatchEntry", b =>
                {
                    b.HasOne("LeagueManager.Domain.Score.IntegerScore", "Score")
                        .WithMany()
                        .HasForeignKey("ScoreId");

                    b.HasOne("LeagueManager.Domain.Competitor.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("LeagueManager.Domain.Match.TeamLeagueMatch", "TeamLeagueMatch")
                        .WithMany("MatchEntries")
                        .HasForeignKey("TeamLeagueMatchId");
                });

            modelBuilder.Entity("LeagueManager.Domain.Match.TeamMatchEntryGoal", b =>
                {
                    b.HasOne("LeagueManager.Domain.Player.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.HasOne("LeagueManager.Domain.Match.TeamMatchEntry", "TeamMatchEntry")
                        .WithMany("Goals")
                        .HasForeignKey("TeamMatchEntryId");
                });

            modelBuilder.Entity("LeagueManager.Domain.Match.TeamMatchEntryLineupEntry", b =>
                {
                    b.HasOne("LeagueManager.Domain.Player.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.HasOne("LeagueManager.Domain.Match.TeamMatchEntry", "TeamMatchEntry")
                        .WithMany("Lineup")
                        .HasForeignKey("TeamMatchEntryId");
                });

            modelBuilder.Entity("LeagueManager.Domain.Match.TeamMatchEntrySubstitution", b =>
                {
                    b.HasOne("LeagueManager.Domain.Player.Player", "PlayerIn")
                        .WithMany()
                        .HasForeignKey("PlayerInId");

                    b.HasOne("LeagueManager.Domain.Player.Player", "PlayerOut")
                        .WithMany()
                        .HasForeignKey("PlayerOutId");

                    b.HasOne("LeagueManager.Domain.Match.TeamMatchEntry", "TeamMatchEntry")
                        .WithMany("Substitutions")
                        .HasForeignKey("TeamMatchEntryId");
                });

            modelBuilder.Entity("LeagueManager.Domain.Round.TeamLeagueRound", b =>
                {
                    b.HasOne("LeagueManager.Domain.Competition.TeamLeague", "TeamLeague")
                        .WithMany("Rounds")
                        .HasForeignKey("TeamLeagueId");
                });

            modelBuilder.Entity("LeagueManager.Domain.Sports.TeamSports", b =>
                {
                    b.HasOne("LeagueManager.Domain.Sports.TeamSportsOptions", "Options")
                        .WithMany()
                        .HasForeignKey("OptionsId");
                });
#pragma warning restore 612, 618
        }
    }
}
